type Query {
    helloWorld: String!
    gameHistory(gameId:String!):[String!]
    getGame(gameId:String!):Game!
}

enum GameStateEnum {
    PLAYER_READY
    PLAYER_MOVE
    GAME_OVER
}

type GameStatusChanged {
    statusChange:GameStateEnum!
    game:Game!
}

type GameHistoryChanged {
    gameId:String!
    message:String!
}

input SetReadyInput {
    gameId:String!
    player:String!
}

input MoveInput {
    gameId:String!
    player:String!
    position: Int!
}

type Mutation {
    createGame (config: GameConfigInput!): Game!
    setReady(setReady: SetReadyInput!): Game!
    makeMove(move: MoveInput!): Game!
}

type Subscription {
    gameStatusChanged(gameId: String!): GameStatusChanged!
    gameHistoryChanged(gameId: String!): GameHistoryChanged!
}

type Game {
    _id: ID!
    gameType: String!
    ended: Boolean!
    winner: String!
    nextPlayer: String!
    playerXReady: Boolean!
    playerOReady: Boolean!
    selections: [String!]
}

input GameConfigInput {
    gameType: String!
}